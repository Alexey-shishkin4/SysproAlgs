import time
import numpy as np
from algs import matrix_multi, shtrassen_matrix, recur_matrix_multi


def format_table(benchmarks, algos, results):
    benchmarks.append('Benchmark')
    col_width = [len(max(benchmarks, key=len))]
    for i in range(len(algos)):
        col_width.append(len(max((algos[i], *[str(results[j][i]) for j in range(len(benchmarks[:-1]))]), key=len)))

    print('Benchmark'.ljust(col_width[0]) + '| ' + ' | '.join(str(algos[i]).ljust(col_width[i + 1])
                                                              for i in range(len(algos))) + ' |')
    print('|' + '-' * (sum(col_width) + len(col_width) * 2) + '|')
    for i in range(len(benchmarks[:-1])):
        print(benchmarks[i].ljust(col_width[0]) + '| ' + ' | '.join(str(results[i][j]).ljust(col_width[j + 1])
                                                                    for j in range(len(results[i]))) + ' |')



test_cases = {}
with open('tests/test1', 'r', encoding='utf-8') as file:
    test_cases['128x128'] = eval(file.read())
with open('tests/test2', 'r', encoding='utf-8') as file:
    test_cases['256x256'] = eval(file.read())
with open('tests/test3', 'r', encoding='utf-8') as file:
    test_cases['512x512'] = eval(file.read())
with open('tests/test4', 'r', encoding='utf-8') as file:
    test_cases['1024x1024'] = eval(file.read())
with open('tests/test5', 'r', encoding='utf-8') as file:
    test_cases['500x500'] = eval(file.read())
with open('tests/test6', 'r', encoding='utf-8') as file:
    test_cases['2048x2048'] = eval(file.read())


def test_alg(functions, test_cases):
    res = [[], [], [], [], [], []]
    c = 0
    for j in test_cases.keys():
        for func in functions:
            start_time = time.time()
            func(test_cases[j], test_cases[j])
            end_time = time.time()
            elapsed_time = end_time - start_time
            res[c].append(elapsed_time)
        c += 1
    return res



"""funcs = [matrix_multi, recur_matrix_multi, shtrassen_matrix]
res = test_alg(funcs, test_cases)
format_table(["128x128", "256x256", "512x512", "1024x1024", "500x500"],
             ["Trivial Multiplication", "Recursive Multiplication", "Strassen Multiplication"],
             res)"""

"""funcs = [recur_matrix_multi, shtrassen_matrix]
res = test_alg(funcs, test_cases)
format_table(["128x128", "256x256", "512x512", "1024x1024", "500x500", "2048x2048"],
             ["Recursive Multiplication", "Strassen Multiplication"],
             res)"""


# Подсчет результатов
# Время для каждого алгоритма
trivial_times = [
    [0.15473103523254395, 0.13750338554382324, 0.23797821998596191, 0.1826932430267334, 0.17053985595703125, 0.23718523979187012, 0.15388131141662598, 0.18207049369812012, 0.20114421844482422, 0.14673972129821777],
    [1.3160440921783447, 1.3354454040527344, 1.3862512111663818, 1.4679315090179443, 1.4493446350097656, 1.6137900352478027, 1.4819421768188477, 1.33896803855896, 1.441176176071167, 1.3887441158294678],
    [12.496443271636963, 12.97634243965149, 12.665091514587402, 13.113958835601807, 13.269210815429688, 12.950052499771118, 13.219477891921997, 12.717341184616089, 13.516745567321777, 13.085809707641602],
    [121.54719042778015, 124.25441670417786, 123.23042488098145, 122.49027872085571, 122.0653874874115, 123.82800221443176, 121.64059400558472, 123.84907364845276, 121.2252631187439, 120.13484501838684],
    [12.706296682357788, 12.75815200805664, 12.454052448272705, 12.610842943191528, 12.5406334400177, 12.919959783554077, 12.807761907577515, 12.564971446990967, 12.572169780731201, 12.611125946044922]
]

recursive_times = [
    [0.0019996166229248047, 0.0009310245513916016, 0.0009949207305908203, 0.0014832019805908203, 0.0010027885437011719, 0.0010492801666259766, 0.0010001659393310547, 0.0010004043579101562, 0.001007080078125, 0.0010001659393310547],
    [0.017412424087524414, 0.014516353607177734, 0.009715795516967773, 0.01072382926940918, 0.018446683883666992, 0.010505914688110352, 0.01909613609313965, 0.011689186096191406, 0.014398574829101562, 0.010508060455322266],
    [0.17498469352722168, 0.12800168991088867, 0.14581608772277832, 0.1192772388458252, 0.11608028411865234, 0.14998316764831543, 0.10701990127563477, 0.12818002700805664, 0.15802717208862305, 0.125291109085083],
    [1.4747910499572754, 1.1352293491363525, 1.218285322189331, 1.1805148124694824, 1.207289695739746, 1.214148759841919, 1.1986439228057861, 1.3243200778961182, 1.2248294353485107, 1.236309289932251],
    [0.1467134952545166, 0.11360931396484375, 0.12585997581481934, 0.1323847770690918, 0.186537504196167, 0.1255042552947998, 0.18389487266540527, 0.11519002914428711, 0.17572689056396484, 0.12545132637023926]
]

strassen_times = [
    [0.0030078887939453125, 0.003958702087402344, 0.003003835678100586, 0.0026421546936035156, 0.0030024051666259766, 0.0036110877990722656, 0.0029997825622558594, 0.0025069713592529297, 0.002936840057373047, 0.0030012130737304688],
    [0.04616832733154297, 0.03672385215759277, 0.0368499755859375, 0.049997806549072266, 0.06908202171325684, 0.036386728286743164, 0.04717421531677246, 0.03956151008605957, 0.0388491153717041, 0.03822684288024902],
    [0.5274195671081543, 0.4067986011505127, 0.4751863479614258, 0.5326964855194092, 0.44913244247436523, 0.5033481121063232, 0.41592931747436523, 0.4734971523284912, 0.48374319076538086, 0.49147653579711914],
    [3.746706962585449, 3.8659474849700928, 3.76383900642395, 3.6994478702545166, 3.5433554649353027, 3.950047731399536, 4.1583092212677, 3.843456745147705, 3.7421340942382812, 3.5436222553253174],
    [0.640181303024292, 0.5269720554351807, 0.41174983978271484, 0.5521292686462402, 0.5610346794128418, 0.45490360260009766, 0.5506918430328369, 0.5136382579803467, 0.4280550479888916, 0.4196457862854004]
]


def calculate_statistics(times):
    means = np.mean(times, axis=1)
    std_devs = np.std(times, axis=1)
    geo_means = np.exp(np.mean(np.log(times), axis=1))
    return means, std_devs, geo_means


trivial_means, trivial_std_devs, trivial_geo_means = calculate_statistics(trivial_times)
recursive_means, recursive_std_devs, recursive_geo_means = calculate_statistics(recursive_times)
strassen_means, strassen_std_devs, strassen_geo_means = calculate_statistics(strassen_times)


print("Trivial Multiplication:")
print("Среднее:", trivial_means)
print("Стандартное отклонение:", trivial_std_devs)
print("Среднее геометрическое:", trivial_geo_means)
print()
print("Recursive Multiplication:")
print("Среднее:", recursive_means)
print("Стандартное отклонение:", recursive_std_devs)
print("Среднее геометрическое:", recursive_geo_means)
print()
print("Strassen Multiplication:")
print("Среднее:", strassen_means)
print("Стандартное отклонение:", strassen_std_devs)
print("Среднее геометрическое:", strassen_geo_means)


"""
Benchmark| Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------|
128x128  | 0.002000093460083008     | 0.004506826400756836    |
256x256  | 0.04956769943237305      | 0.10112261772155762     |
512x512  | 0.34932565689086914      | 0.5022976398468018      |
1024x1024| 1.3529918193817139       | 3.831336259841919       |
500x500  | 0.12791037559509277      | 0.5250375270843506      |
2048x2048| 11.382957696914673       | 29.444302320480347      |
Benchmark| Trivial Multiplication | Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------------------------------|
128x128  | 0.15473103523254395    | 0.0019996166229248047    | 0.0030078887939453125   |
256x256  | 1.3160440921783447     | 0.017412424087524414     | 0.04616832733154297     |
512x512  | 12.496443271636963     | 0.17498469352722168      | 0.5274195671081543      |
1024x1024| 121.54719042778015     | 1.4747910499572754       | 3.746706962585449       |
500x500  | 12.706296682357788     | 0.1467134952545166       | 0.640181303024292       |
Benchmark| Trivial Multiplication | Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------------------------------|
128x128  | 0.13750338554382324    | 0.0009310245513916016    | 0.003958702087402344    |
256x256  | 1.3354454040527344     | 0.014516353607177734     | 0.03672385215759277     |
512x512  | 12.97634243965149      | 0.12800168991088867      | 0.4067986011505127      |
1024x1024| 124.25441670417786     | 1.1352293491363525       | 3.8659474849700928      |
500x500  | 12.75815200805664      | 0.11360931396484375      | 0.5269720554351807      |
Benchmark| Trivial Multiplication | Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------------------------------|
128x128  | 0.23797821998596191    | 0.0009949207305908203    | 0.003003835678100586    |
256x256  | 1.3862512111663818     | 0.009715795516967773     | 0.0368499755859375      |
512x512  | 12.665091514587402     | 0.14581608772277832      | 0.4751863479614258      |
1024x1024| 123.23042488098145     | 1.218285322189331        | 3.76383900642395        |
500x500  | 12.454052448272705     | 0.12585997581481934      | 0.41174983978271484     |
Benchmark| Trivial Multiplication | Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------------------------------|
128x128  | 0.1826932430267334     | 0.0014832019805908203    | 0.0026421546936035156   |
256x256  | 1.4679315090179443     | 0.01072382926940918      | 0.049997806549072266    |
512x512  | 13.113958835601807     | 0.1192772388458252       | 0.5326964855194092      |
1024x1024| 122.49027872085571     | 1.1805148124694824       | 3.6994478702545166      |
500x500  | 12.610842943191528     | 0.1323847770690918       | 0.5521292686462402      |
Benchmark| Trivial Multiplication | Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------------------------------|
128x128  | 0.17053985595703125    | 0.0010027885437011719    | 0.0030024051666259766   |
256x256  | 1.4493446350097656     | 0.018446683883666992     | 0.06908202171325684     |
512x512  | 13.269210815429688     | 0.11608028411865234      | 0.44913244247436523     |
1024x1024| 122.0653874874115      | 1.207289695739746        | 3.5433554649353027      |
500x500  | 12.5406334400177       | 0.186537504196167        | 0.5610346794128418      |
Benchmark| Trivial Multiplication | Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------------------------------|
128x128  | 0.23718523979187012    | 0.0010492801666259766    | 0.0036110877990722656   |
256x256  | 1.6137900352478027     | 0.010505914688110352     | 0.036386728286743164    |
512x512  | 12.950052499771118     | 0.14998316764831543      | 0.5033481121063232      |
1024x1024| 123.82800221443176     | 1.214148759841919        | 3.950047731399536       |
500x500  | 12.919959783554077     | 0.1255042552947998       | 0.45490360260009766     |
Benchmark| Trivial Multiplication | Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------------------------------|
128x128  | 0.15388131141662598    | 0.0010001659393310547    | 0.0029997825622558594   |
256x256  | 1.4819421768188477     | 0.01909613609313965      | 0.04717421531677246     |
512x512  | 13.219477891921997     | 0.10701990127563477      | 0.41592931747436523     |
1024x1024| 121.64059400558472     | 1.1986439228057861       | 4.1583092212677         |
500x500  | 12.807761907577515     | 0.18389487266540527      | 0.5506918430328369      |
Benchmark| Trivial Multiplication | Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------------------------------|
128x128  | 0.18207049369812012    | 0.0010004043579101562    | 0.0025069713592529297   |
256x256  | 1.33896803855896       | 0.011689186096191406     | 0.03956151008605957     |
512x512  | 12.717341184616089     | 0.12818002700805664      | 0.4734971523284912      |
1024x1024| 123.84907364845276     | 1.3243200778961182       | 3.843456745147705       |
500x500  | 12.564971446990967     | 0.11519002914428711      | 0.5136382579803467      |
Benchmark| Trivial Multiplication | Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------------------------------|
128x128  | 0.20114421844482422    | 0.001007080078125        | 0.002936840057373047    |
256x256  | 1.441176176071167      | 0.014398574829101562     | 0.0388491153717041      |
512x512  | 13.516745567321777     | 0.15802717208862305      | 0.48374319076538086     |
1024x1024| 121.2252631187439      | 1.2248294353485107       | 3.7421340942382812      |
500x500  | 12.572169780731201     | 0.17572689056396484      | 0.4280550479888916      |
Benchmark| Trivial Multiplication | Recursive Multiplication | Strassen Multiplication |
|--------------------------------------------------------------------------------------|
128x128  | 0.14673972129821777    | 0.0010001659393310547    | 0.0030012130737304688   |
256x256  | 1.3887441158294678     | 0.010508060455322266     | 0.03822684288024902     |
512x512  | 13.085809707641602     | 0.125291109085083        | 0.49147653579711914     |
1024x1024| 120.13484501838684     | 1.236309289932251        | 3.5436222553253174      |
500x500  | 12.611125946044922     | 0.12545132637023926      | 0.4196457862854004      |
"""